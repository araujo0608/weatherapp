export default function Home(){

    // == States == 
    const [location, setLocation] = useState(null);
    const [granted, setGranted] = useState(true);
    const [currentInformation, setCurrentInformation] = useState({});

    // == Functions == 
    async function getUserPermissionAndLocation(){
        let { status } =  await requestForegroundPermissionsAsync();
        if (status !== 'granted'){
            setGranted(false);
            return;
        }

        try{
            let currentPosition = await getCurrentPositionAsync();
            setLocation({
                lat: String(currentPosition.coords.latitude),
                long: String(currentPosition.coords.longitude)
        });
            const [currentURL, forecastFiveDaysURL] = createURL(
                location.coords.latitude, location.coords.longitude, api.key
            );
            getCurrent(currentURL);
        }catch(error){
            console.error(`ERROR GET POSITION ${error}`);
        }
            
    }

    function createURL(lat, long, apikey){
        // index 0: current, index 1: forecastFiveDays
        return [
            `http://api.weatherapi.com/v1/current.json?key=${apikey}&q=${lat},${long}&aqi=yes`,
            `https://api.weatherapi.com/v1/forecast.json?key=${apikey}&q=${lat},${long}&days=5&aqi=yes&alerts=no`
        ]
    }

    async function getCurrent(url){
        try{
            const response = await fetch(url);
            const datas = await response.json();
            
            const splitted = String(datas.location.localtime).split(' ');

            console.log(`City: ${datas.location.name}`);
            console.log(`Temp: ${datas.current.temp_c}ยบ`);
            console.log(`${datas.current.condition.text}`);
            console.log(splitted[1].split(':').join('h'));
            
            
            setCurrentInformation({
                city: `${datas.location.name}`.toUpperCase(),
                temp: `${datas.current.temp_c}ยบ`,
                condition :{
                    text: `${datas.current.condition.text}`
                },
                localtime: String(splitted[1].split(':').join('h'))
            })
            
            
        } catch(err){
            console.warn(err.msg);
        }
    }



    // == Effects == 
    useEffect(() => {
        getUserPermissionAndLocation();
    }, [])


    return(
      <>
      {
        granted ?
        
        <View>
            <Text>Latitude: {0 || JSON.stringify(location)} </Text>
            <Text>Longitude: {JSON.stringify(location)} </Text>
        </View>
        :
        <View>
            <Text>Permission to access location was denied</Text>
            <Button title='Grant permission'></Button>
        </View>
      }
              
      </>
    )
}
